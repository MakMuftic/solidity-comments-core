{"version":3,"sources":["../../../src/lib/contract/contract-file.es6"],"names":["path","ContractFile","filePath","fs","existsSync","Error","readFileSync","split","fileName","basename","Promise","resolve","reject","file","createWriteStream","on","err","lines","forEach","line","write","end","Contract"],"mappings":";;;;;;;;;AAAA;;IAAYA,I;;AACZ;;;;AACA;;;;;;;;;;;;IAEaC,Y,WAAAA,Y;;;AAEX,wBAAYC,QAAZ,EAAsB;AAAA;;AACpB,QAAI,CAACC,aAAGC,UAAH,CAAcF,QAAd,CAAL,EAA8B;AAC5B,YAAM,IAAIG,KAAJ,WAAkBH,QAAlB,iBAAN;AACD;;AAHmB,4HAIdC,aAAGG,YAAH,CAAgBJ,QAAhB,EAA0B,OAA1B,EAAmCK,KAAnC,CAAyC,IAAzC,CAJc;;AAKpB,UAAKP,IAAL,GAAYE,QAAZ;AACA,UAAKM,QAAL,GAAgBR,KAAKS,QAAL,CAAcP,QAAd,CAAhB;AANoB;AAOrB;;;;kCAEa;AACZ,aAAO,KAAKM,QAAZ;AACD;;;8BAES;AACR,aAAO,KAAKR,IAAZ;AACD;;;2BAEiB;AAAA;;AAAA,UAAbA,IAAa,uEAAN,IAAM;;AAChB,UAAI,CAACA,IAAL,EAAW;AACTA,eAAO,KAAKA,IAAZ;AACD;AACD,aAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAIC,OAAOV,aAAGW,iBAAH,CAAqBd,IAArB,CAAX;AACAa,aAAKE,EAAL,CAAQ,OAAR,EAAiB,UAASC,GAAT,EAAc;AAAEJ,iBAAOI,GAAP;AAAc,SAA/C;AACA,eAAKC,KAAL,CAAWC,OAAX,CAAmB,UAACC,IAAD,EAAU;AAC3BN,eAAKO,KAAL,CAAWD,OAAO,IAAlB;AACD,SAFD;AAGAN,aAAKQ,GAAL;AACAV;AACD,OARM,CAAP;AASD;;;;EAhC+BW,kB","file":"contract-file.js","sourcesContent":["import * as path from 'path';\nimport fs from 'fs';\nimport { Contract } from './contract';\n\nexport class ContractFile extends Contract{\n\n  constructor(filePath) {\n    if (!fs.existsSync(filePath)) {\n      throw new Error(`File ${filePath} not found!`);\n    }\n    super(fs.readFileSync(filePath, 'utf-8').split('\\n'));\n    this.path = filePath;\n    this.fileName = path.basename(filePath);\n  }\n\n  getFilename() {\n    return this.fileName;\n  }\n\n  getPath() {\n    return this.path;\n  }\n\n  save(path = null) {\n    if (!path) {\n      path = this.path;\n    }\n    return new Promise((resolve, reject) => {\n      let file = fs.createWriteStream(path);\n      file.on('error', function(err) { reject(err); });\n      this.lines.forEach((line) => {\n        file.write(line + '\\n');\n      });\n      file.end();\n      resolve();\n    });\n  }\n\n}\n"]}