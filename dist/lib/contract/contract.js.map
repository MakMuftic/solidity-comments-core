{"version":3,"sources":["../../../src/lib/contract/contract.es6"],"names":["Contract","text","Array","isArray","lines","split","pos","length","splice","positions","forEach","removeLine","line","index","indexOf"],"mappings":";;;;;;;;;;;;IAAaA,Q,WAAAA,Q;AAEX,oBAAYC,IAAZ,EAAkB;AAAA;;AAChB,QAAIC,MAAMC,OAAN,CAAcF,IAAd,CAAJ,EAAyB;AACvB,WAAKG,KAAL,GAAaH,IAAb;AACD,KAFD,MAEO;AACL,WAAKG,KAAL,GAAaH,KAAKI,KAAL,CAAW,IAAX,CAAb;AACD;AACD,SAAKC,GAAL,GAAW,CAAX;AACD;;;;4BAEO;AACN,WAAKA,GAAL,GAAW,CAAX;AACD;;;mCAEc;AACb,aAAO,KAAKF,KAAL,CAAWG,MAAlB;AACD;;;kCAEa;AACZ,aAAO,KAAKD,GAAZ;AACD;;;gCAEWA,G,EAAK;AACf,WAAKA,GAAL,GAAWA,GAAX;AACD;;;kCAEa;AACZ,UAAI,KAAKA,GAAL,IAAY,KAAKF,KAAL,CAAWG,MAA3B,EAAmC;AACjC,eAAO,IAAP;AACD;AACD,aAAO,KAAKH,KAAL,CAAW,KAAKE,GAAL,EAAX,CAAP;AACD;;;+BAEUA,G,EAAK;AACd,WAAKF,KAAL,CAAWI,MAAX,CAAkBF,GAAlB,EAAuB,CAAvB;AACD;;;gCAEWG,S,EAAW;AAAA;;AACrBA,gBAAUC,OAAV,CAAkB,UAACJ,GAAD;AAAA,eAAS,MAAKK,UAAL,CAAgBL,GAAhB,CAAT;AAAA,OAAlB;AACD;;;sCAEiBF,K,EAAOQ,I,EAAM;AAAA;;AAC7B,UAAIC,QAAQ,KAAKT,KAAL,CAAWU,OAAX,CAAmBF,IAAnB,CAAZ;AACA,qBAAKR,KAAL,EAAWI,MAAX,gBAAkBK,KAAlB,EAAyB,CAAzB,4BAA+BT,KAA/B;AACD;;;qCAEgBH,I,EAAMW,I,EAAM;AAAA;;AAC3B,UAAIC,QAAQ,KAAKT,KAAL,CAAWU,OAAX,CAAmBF,IAAnB,CAAZ;AACA,UAAIR,QAAQH,KAAKI,KAAL,CAAW,IAAX,CAAZ;AACA,sBAAKD,KAAL,EAAWI,MAAX,iBAAkBK,KAAlB,EAAyB,CAAzB,4BAA+BT,KAA/B;AACD","file":"contract.js","sourcesContent":["export class Contract {\n\n  constructor(text) {\n    if (Array.isArray(text)) {\n      this.lines = text;\n    } else {\n      this.lines = text.split('\\n');\n    }\n    this.pos = 0;\n  }\n\n  reset() {\n    this.pos = 0;\n  }\n\n  getLineCount() {\n    return this.lines.length;\n  }\n\n  getPosition() {\n    return this.pos;\n  }\n\n  setPosition(pos) {\n    this.pos = pos;\n  }\n\n  getNextLine() {\n    if (this.pos >= this.lines.length) {\n      return null;\n    }\n    return this.lines[this.pos++];\n  }\n\n  removeLine(pos) {\n    this.lines.splice(pos, 1);\n  }\n\n  removeLines(positions) {\n    positions.forEach((pos) => this.removeLine(pos));\n  }\n\n  insertLinesBefore(lines, line) {\n    let index = this.lines.indexOf(line);\n    this.lines.splice(index, 0, ...lines);\n  }\n\n  insertTextBefore(text, line) {\n    let index = this.lines.indexOf(line);\n    let lines = text.split('\\n');\n    this.lines.splice(index, 0, ...lines);\n  }\n\n}\n"]}